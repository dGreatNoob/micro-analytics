version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: microlytics-db
    restart: unless-stopped
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: microlytics
      POSTGRES_PASSWORD: microlytics_dev_password
      POSTGRES_DB: microlytics_dev
      POSTGRES_INITDB_ARGS: '-E UTF8 --locale=en_US.UTF-8'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U microlytics -d microlytics_dev']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microlytics-network

  # Redis (for caching, optional but recommended)
  redis:
    image: redis:7-alpine
    container_name: microlytics-redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microlytics-network
    command: redis-server --appendonly yes

  # Adminer (Database UI - optional, alternative to Prisma Studio)
  adminer:
    image: adminer:latest
    container_name: microlytics-adminer
    restart: unless-stopped
    ports:
      - '8080:8080'
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    networks:
      - microlytics-network
    depends_on:
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  microlytics-network:
    driver: bridge

