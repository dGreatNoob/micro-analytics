generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============= USER MANAGEMENT =============

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  password      String?   // For credentials login (optional - OAuth users won't have this)
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  sites         Site[]
  accounts      Account[]
  sessions      Session[]
}

// ============= TRACKED SITES =============

model Site {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  name        String
  domain      String
  siteId      String   @unique // Public tracking ID (e.g., "site_123abc")
  timezone    String   @default("UTC")
  isPublic    Boolean  @default(false)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  pageviews   Pageview[]
  events      Event[]
  
  @@index([userId])
}

// ============= ANALYTICS DATA =============

model Pageview {
  id          String   @id @default(cuid())
  siteId      String
  site        Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  
  // Page Info
  pathname    String
  referrer    String?
  
  // Visitor Info (anonymized)
  visitorId   String   // Hashed daily rotating ID
  country     String?
  device      String?  // "desktop", "mobile", "tablet"
  browser     String?  // "chrome", "firefox", etc.
  os          String?  // "windows", "macos", "linux", "ios", "android"
  
  // Timing
  timestamp   DateTime @default(now())
  duration    Int?     // Time on page in milliseconds
  
  @@index([siteId, timestamp(sort: Desc)])
  @@index([visitorId, timestamp])
  @@index([pathname, siteId])
}

model Event {
  id          String   @id @default(cuid())
  siteId      String
  site        Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
  
  name        String   // Event name: "signup", "purchase", etc.
  properties  Json?    // Custom event data
  
  visitorId   String
  timestamp   DateTime @default(now())
  
  @@index([siteId, timestamp(sort: Desc)])
  @@index([name, siteId])
}

// ============= NEXTAUTH TABLES =============

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
}
