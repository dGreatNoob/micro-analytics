generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Event {
  id         String   @id
  siteId     String
  name       String
  properties Json?
  visitorId  String
  timestamp  DateTime @default(now())
  Site       Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([name, siteId])
  @@index([siteId, timestamp(sort: Desc)])
}

model Pageview {
  id        String   @id
  siteId    String
  pathname  String
  referrer  String?
  visitorId String
  country   String?
  device    String?
  browser   String?
  os        String?
  timestamp DateTime @default(now())
  duration  Int?
  Site      Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)

  @@index([pathname, siteId])
  @@index([siteId, timestamp(sort: Desc)])
  @@index([visitorId, timestamp])
}

model Session {
  id           String   @id
  sessionToken String   @unique
  userId       String
  expires      DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Site {
  id        String     @id
  userId    String
  name      String
  domain    String
  siteId    String     @unique
  timezone  String     @default("UTC")
  isPublic  Boolean    @default(false)
  createdAt DateTime   @default(now())
  updatedAt DateTime
  Event     Event[]
  Pageview  Pageview[]
  User      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime
  password      String?
  Account       Account[]
  Session       Session[]
  Site          Site[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
